<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<!--  ************************XSLT for xcbl3->gsXML  by alex 2006-04-12 ************************* -->
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>
	<xsl:variable name="upper" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
	<xsl:variable name="lower" select="'abcdefghijklmnopqrstuvwxyz'"/>
	<xsl:variable name="firstItemSHP" select="Order/OrderDetail/ListOfItemDetail/ItemDetail[1]/BaseItemDetail/FinalRecipient"/>
	<xsl:template match="/Order">
		<biztalk_1>
			<xsl:call-template name="header">        </xsl:call-template>
			<body>
				<PurchaseOrder>
					<xsl:apply-templates select="OrderHeader"/>
					<xsl:apply-templates select="OrderHeader/OrderParty"/>
					<!-- <xsl:apply-templates select="OrderHeader/OrderReferences"/> -->
					<!-- Lei Lu added the following Payment mapping on March 25, 2008 per Cam -->
					<xsl:apply-templates select="OrderHeader/OrderPaymentInstructions/PaymentInstructions/PaymentTerms/PaymentTerm"/>
					<!-- Lei find the below one is not correct on Oct. 30, 2015, thus change it
                    <xsl:apply-templates select="OrderHeader/Payment/CardInfo"/>
					 -->
					<xsl:apply-templates select="OrderHeader/OrderPaymentInstructions/PaymentInstructions/PaymentMethod/CardInfo"/>
					<xsl:apply-templates select="OrderDetail"/>
					<xsl:call-template name="OrderSummary"/>
				</PurchaseOrder>
			</body>
		</biztalk_1>
	</xsl:template>
	<xsl:template name="header">
		<header>
			<delivery>
				<message>
					<!--  *****************************<messageID> is the INTERNAL_TRANSACTION_ID in TRANS_LOG************************* -->
					<messageID/>
					<!--  *****************************<sent> is the sent time of the PO************************* -->
					<sent/>
					<subject/>
				</message>
				<to>
					<address>487846347</address>
				</to>
				<from>
					<address>XMLPROCUREMENT</address>
				</from>
			</delivery>
			<manifest>
				<document>
					<name>TradeOrder</name>
				</document>
			</manifest>
		</header>
	</xsl:template>
	<xsl:template match="OrderHeader">
		<xsl:variable name="SBD" select="OrderDates/RequestedShipByDate"/>
		<xsl:variable name="RDD" select="OrderDates/RequestedDeliverByDate"/>
		<OrderHeader OrderType="XCBL_{Purpose/PurposeCoded}">
			<BusinessID>C1</BusinessID>
			<OrderingMethod>xCBL</OrderingMethod>
		</OrderHeader>
		<Currency>
			<ISOCurrency>
				<xsl:value-of select="OrderCurrency/Currency/CurrencyCoded"/>
			</ISOCurrency>
		</Currency>
		<!-- I remember this value is a fixed 'Y', double check with Shan -->
		<Instructions InstrucType="SHP">
			<InstructCodesc>ShipToOneTime</InstructCodesc>
			<InstructValue>Y</InstructValue>
		</Instructions>
		<Instructions InstrucType="CPY">
			<InstructCode>alwaysCreateOrgCBN</InstructCode>
			<InstructValue>Y</InstructValue>
		</Instructions>
		<xsl:if test="string(PartialShipmentAllowed)">
			<Instructions InstrucType="SHP">
				<InstructCodesc>PartialShipment</InstructCodesc>
				<InstructValue>
					<xsl:value-of select="PartialShipmentAllowed"/>
				</InstructValue>
			</Instructions>
		</xsl:if>
		<xsl:if test="string(OrderHeaderNote)">
			<Instructions InstrucType="COM">
				<InstructCodesc>OrderHeaderNote</InstructCodesc>
				<InstructValue>
					<xsl:value-of select="OrderHeaderNote"/>
				</InstructValue>
			</Instructions>
		</xsl:if>
		<!-- commented out by Lei Lu on Oct 20, 2006 -->
		<!--
        <xsl:if test="string(ListOfStructuredNote)">
            <xsl:for-each select="ListOfStructuredNote/StructuredNote">
                <Instructions InstrucType="LSN">
                    <InstructCode>
                        <xsl:value-of select="NoteID"/>
                    </InstructCode>
                    <InstructValue>
                        <xsl:value-of select="GeneralNote"/>
                    </InstructValue>
                </Instructions>
            </xsl:for-each>
        </xsl:if>
        -->
		<xsl:if test="string(ListOfNameValueSet)">
			<xsl:for-each select="ListOfNameValueSet/NameValueSet/ListOfNameValuePair/NameValuePair">
				<Instructions InstrucType="NVP">
					<InstructCode>
						<xsl:value-of select="Name"/>
					</InstructCode>
					<InstructValue>
						<xsl:value-of select="Value"/>
					</InstructValue>
				</Instructions>
			</xsl:for-each>
		</xsl:if>
		<DateInfo DateType="ORD">
			<DateTimeUTC>
				<xsl:value-of select="concat(substring(OrderIssueDate,1,4),'-',substring(OrderIssueDate,5,2), '-', substring(OrderIssueDate, 7))"/>
			</DateTimeUTC>
		</DateInfo>
		<xsl:if test="string($RDD)">
			<DateInfo DateType="EAD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($RDD,1,4),'-',substring($RDD,5,2), '-', substring($RDD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<xsl:if test="string($SBD)">
			<DateInfo DateType="SBD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($SBD,1,4),'-',substring($SBD,5,2), '-', substring($SBD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<DocumentReference DocType="CPO">
			<DocumentID>
				<xsl:value-of select="OrderNumber/BuyerOrderNumber"/>
			</DocumentID>
			<DocumentDesc>CustomerPurchaseOrderNumber</DocumentDesc>
		</DocumentReference>
	</xsl:template>
	<xsl:template match="OrderParty">
		<xsl:apply-templates select="BillToParty/Party">
			<xsl:with-param name="partyType" select="'INV'"/>
			<xsl:with-param name="IDCodeType">
				<xsl:value-of select="BillToParty/Party/PartyID/Identifier/Ident"/>
			</xsl:with-param>
		</xsl:apply-templates>
		<xsl:apply-templates select="BuyerParty/Party">
			<xsl:with-param name="partyType" select="'PUR'"/>
			<xsl:with-param name="IDCodeType">
				<xsl:value-of select="BuyerParty/Party/PartyID/Identifier/Ident"/>
			</xsl:with-param>
		</xsl:apply-templates>
		<xsl:apply-templates select="SellerParty/Party">
			<xsl:with-param name="partyType" select="'SUP'"/>
			<xsl:with-param name="IDCodeType">
				<xsl:value-of select="SellerParty/Party/PartyID/Identifier/Ident"/>
			</xsl:with-param>
		</xsl:apply-templates>
		<xsl:choose>
			<xsl:when test="ShipToParty">
				<xsl:apply-templates select="ShipToParty/Party">
					<xsl:with-param name="partyType" select="'SHP'"/>
					<xsl:with-param name="IDCodeType">
						<xsl:value-of select="ShipToParty/Party/PartyID/Identifier/Ident"/>
					</xsl:with-param>
				</xsl:apply-templates>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="$firstItemSHP/Party">
					<xsl:with-param name="partyType" select="'SHP'"/>
					<xsl:with-param name="IDCodeType">
						<xsl:value-of select="$firstItemSHP/Party/PartyID/Identifier/Ident"/>
					</xsl:with-param>
				</xsl:apply-templates>
			</xsl:otherwise>
		</xsl:choose>
		<!--<xsl:apply-templates select="ShipToParty/Party">
            <xsl:with-param name="partyType" select="'SHP'"/>
        </xsl:apply-templates>
        -->
	</xsl:template>
	<xsl:template match="Party">
		<xsl:param name="partyType"/>
		<xsl:param name="IDCodeType"/>
		<xsl:variable name="region" select="normalize-space(NameAddress/Region/RegionCoded)"/>
		<CustomerReference>
			<BuyerID IDType="{$partyType}">
				<!--  *****************************Maybe the PartyID should be put here,but in the sample record,this field is empty************************* -->
				<IDCode>
					<xsl:value-of select="$IDCodeType"/>
				</IDCode>
				<CustIDCode>
					<xsl:value-of select="$IDCodeType"/>
				</CustIDCode>
				<Address>
					<xsl:if test="string-length(normalize-space(NameAddress/Name1)) !=0">
						<Company>
							<xsl:value-of select="NameAddress/Name1"/>
						</Company>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/Name2)) !=0">
						<Division>
							<xsl:value-of select="NameAddress/Name2"/>
						</Division>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/Name3)) !=0">
						<Division>
							<xsl:value-of select="NameAddress/Name3"/>
						</Division>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/InhouseMail)) !=0">
						<Division>
							<xsl:value-of select="NameAddress/InhouseMail"/>
						</Division>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/Street)) !=0">
						<Street>
							<xsl:value-of select="NameAddress/Street"/>
						</Street>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/StreetSupplement1)) !=0">
						<Street>
							<xsl:value-of select="NameAddress/StreetSupplement1"/>
						</Street>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/StreetSupplement2)) !=0">
						<Street>
							<xsl:value-of select="NameAddress/StreetSupplement2"/>
						</Street>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/HouseNumber)) !=0">
						<Street>
							<xsl:value-of select="NameAddress/HouseNumber"/>
						</Street>
					</xsl:if>
					<xsl:if test="string-length(normalize-space(NameAddress/City)) !=0">
						<City>
							<xsl:value-of select="NameAddress/City"/>
						</City>
					</xsl:if>
					<xsl:choose>
						<xsl:when test="($region='Other') and (string-length(normalize-space(NameAddress/Region/RegionCodedOther)) !=0)">
							<State>
								<xsl:value-of select="NameAddress/Region/RegionCodedOther"/>
							</State>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="string($region)">
								<State>
									<xsl:value-of select="$region"/>
								</State>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:if test="string-length(normalize-space(NameAddress/PostalCode)) !=0">
						<ZIPCode>
							<xsl:value-of select="NameAddress/PostalCode"/>
						</ZIPCode>
					</xsl:if>
					<!--
                    <xsl:if test="string-length(normalize-space(NameAddress/Country/CountryCoded)) !=0">
                        <ISOCountryCode>
                            <xsl:value-of select="NameAddress/Country/CountryCoded"/>
                        </ISOCountryCode>
                    </xsl:if>
                    -->
					<ISOCountryCode>
						<xsl:choose>
							<xsl:when test="NameAddress/Country/CountryCoded='Other'">
								<xsl:value-of select="NameAddress/Country/CountryCodedOther"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="NameAddress/Country/CountryCoded"/>
							</xsl:otherwise>
						</xsl:choose>
					</ISOCountryCode>
				</Address>
			</BuyerID>
			<xsl:if test="OrderContact">
				<xsl:apply-templates select="OrderContact">
					<xsl:with-param name="partyContactType" select="$partyType"/>
				</xsl:apply-templates>
			</xsl:if>
			<xsl:if test="ReceivingContact">
				<xsl:apply-templates select="ReceivingContact">
					<xsl:with-param name="partyContactType" select="$partyType"/>
				</xsl:apply-templates>
			</xsl:if>
			<xsl:if test="ShippingContact">
				<xsl:apply-templates select="ShippingContact">
					<xsl:with-param name="partyContactType" select="$partyType"/>
				</xsl:apply-templates>
			</xsl:if>
		</CustomerReference>
	</xsl:template>
	<xsl:template match="OrderContact">
		<xsl:param name="partyContactType"/>
		<ContactInfo ContacType="{$partyContactType}" ContactParty="ORD">
			<xsl:if test="string-length(normalize-space(Contact/ContactName)) !=0">
				<ContactName Name="{Contact/ContactName}"/>
			</xsl:if>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'TelephoneNumber' or ContactNumberTypeCoded = 'TELEPHONE'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactPhone>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactPhone>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'FaxNumber' or ContactNumberTypeCoded = 'FAX'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactFax>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactFax>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'EmailAddress' or ContactNumberTypeCoded = 'EMAIL'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactEmail>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactEmail>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		</ContactInfo>
	</xsl:template>
	<xsl:template match="ReceivingContact">
		<xsl:param name="partyContactType"/>
		<ContactInfo ContacType="{$partyContactType}" ContactParty="RCV">
			<xsl:if test="string-length(normalize-space(Contact/ContactName)) !=0">
				<ContactName Name="{Contact/ContactName}"/>
			</xsl:if>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'TelephoneNumber' or ContactNumberTypeCoded = 'TELEPHONE'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactPhone>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactPhone>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'FaxNumber' or ContactNumberTypeCoded = 'FAX'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactFax>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactFax>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'EmailAddress' or ContactNumberTypeCoded = 'EMAIL'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactEmail>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactEmail>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		</ContactInfo>
	</xsl:template>
	<xsl:template match="ShippingContact">
		<xsl:param name="partyContactType"/>
		<ContactInfo ContacType="{$partyContactType}" ContactParty="SHP">
			<xsl:if test="string-length(normalize-space(Contact/ContactName)) !=0">
				<ContactName Name="{Contact/ContactName}"/>
			</xsl:if>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'TelephoneNumber' or ContactNumberTypeCoded = 'TELEPHONE'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactPhone>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactPhone>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'FaxNumber' or ContactNumberTypeCoded = 'FAX'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactFax>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactFax>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="Contact/ListOfContactNumber/ContactNumber">
				<xsl:if test="ContactNumberTypeCoded = 'EmailAddress' or ContactNumberTypeCoded = 'EMAIL'">
					<xsl:if test="string-length(normalize-space(ContactNumberValue)) != 0">
						<ContactEmail>
							<xsl:value-of select="ContactNumberValue"/>
						</ContactEmail>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
		</ContactInfo>
	</xsl:template>
	<xsl:template match="PaymentTerm">
		<xsl:if test="string-length(normalize-space(PaymentTermCoded)) !=0">
			<Payment>
				<PaymenTerm>
					<xsl:value-of select="PaymentTermCoded"/>
				</PaymenTerm>
				<PaymenTermOther>
					<xsl:value-of select="PaymentTermCodedOther"/>
				</PaymenTermOther>
			</Payment>
		</xsl:if>
	</xsl:template>
	<!--  ORG is mapped from the senderId, so not needed unless for special case   <xsl:template match="OrderReferences">    <CustomerReference>     <BuyerID IDType="ORG">      <IDCode>       <xsl:value-of select="AccountCode/Reference/RefNum"/>      </IDCode>     </BuyerID>    </CustomerReference>   </xsl:template>   -->
	<xsl:template match="CardInfo">
		<CardInfo>
			<CardType>
				<xsl:value-of select="CardType"/>
			</CardType>
			<CardNum>
				<xsl:value-of select="CardNum"/>
			</CardNum>
			<CardAuthCode>
				<xsl:value-of select="CardAuthCode"/>
			</CardAuthCode>
			<CardRefNum>
				<xsl:value-of select="CardRefNum"/>
			</CardRefNum>
			<CardExpirationDate>
				<xsl:value-of select="concat(substring(CardExpirationDate,1,4),'-',substring(CardExpirationDate,5,2), '-', substring(CardExpirationDate, 7))"/>
			</CardExpirationDate>
			<CardTypeOther>
				<xsl:value-of select="CardTypeOther"/>
			</CardTypeOther>
			<CardHolderName>
				<xsl:value-of select="CardHolderName"/>
			</CardHolderName>
		</CardInfo>
	</xsl:template>
	<xsl:template match="OrderDetail">
		<xsl:for-each select="ListOfItemDetail/ItemDetail">
			<OrderItem>
				<xsl:variable name="partID" select="translate(normalize-space(BaseItemDetail/ItemIdentifiers/PartNumbers/SellerPartNumber/PartNum/PartID), $lower, $upper)"/>
				<xsl:choose>
					<xsl:when test="substring($partID, 1, 5) = 'CFGE-' or substring($partID, 1, 4) = 'CFG-'">
						<BundleItem bundleItemNumber="{position()}" parentItemNumber="{BaseItemDetail/LineItemNum/BuyerLineItemNum}">
							<xsl:call-template name="itemDetail4BundleItem">         </xsl:call-template>
						</BundleItem>
					</xsl:when>
					<xsl:otherwise>
						<Item>
							<LineNumber>
								<xsl:value-of select="position()"/>
							</LineNumber>
							<ItemNumber>
								<xsl:value-of select="BaseItemDetail/LineItemNum/BuyerLineItemNum"/>
							</ItemNumber>
							<xsl:call-template name="itemDetail4SingleItem">         </xsl:call-template>
						</Item>
					</xsl:otherwise>
				</xsl:choose>
				<Transport>
					<TransportMode>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/TransportMode/TransportModeCoded"/>
					</TransportMode>
					<TransportModeOther>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/TransportMode/TransportModeCodedOther"/>
					</TransportModeOther>
					<TransportMean>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/TransportMeans/TransportMeansCoded"/>
					</TransportMean>
					<TransportMeanOther>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/TransportMeans/TransportMeansCodedOther"/>
					</TransportMeanOther>
					<Carrier>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/CarrierName"/>
					</Carrier>
					<TransportInstructions>
						<xsl:value-of select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/Transport/ShippingInstructions"/>
					</TransportInstructions>
				</Transport>
			</OrderItem>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="itemDetail4BundleItem">
		<xsl:variable name="RDD" select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/RequestedDeliveryDate"/>
		<ProductInformation ProductCode="BND">
			<ProductDescription>
				<xsl:value-of select="BaseItemDetail/ItemIdentifiers/ItemDescription"/>
			</ProductDescription>
			<ProductNumber>
				<xsl:value-of select="normalize-space(BaseItemDetail/ItemIdentifiers/PartNumbers/SellerPartNumber/PartNum/PartID)"/>
			</ProductNumber>
			<ProductName>
				<xsl:value-of select="BaseItemDetail/ItemIdentifiers/ItemDescription"/>
			</ProductName>
		</ProductInformation>
		<Quantity>
			<OrderQuantity>
				<xsl:value-of select="BaseItemDetail/TotalQuantity/Quantity/QuantityValue"/>
			</OrderQuantity>
		</Quantity>
		<xsl:if test="string(PricingDetail/ListOfPrice/Price/UnitPrice/UnitPriceValue)">
			<Price PriceType="VDP">
				<PriceAmount>
					<xsl:value-of select="PricingDetail/ListOfPrice/Price/UnitPrice/UnitPriceValue"/>
				</PriceAmount>
			</Price>
		</xsl:if>
		<xsl:if test="string($RDD)">
			<DateInfo DateType="EAD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($RDD,1,4),'-',substring($RDD,5,2), '-', substring($RDD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<!--added SBD info by alex 2006-5-8-->
		<xsl:if test="string($RDD)">
			<DateInfo DateType="SBD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($RDD,1,4),'-',substring($RDD,5,2), '-', substring($RDD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<!-- Commented out by Lei Lu on Oct. 20, 2006
        <xsl:if test="string(ListOfStructuredNote)">
            <xsl:for-each select="ListOfStructuredNote/StructuredNote">
                <Instructions InstrucType="LSN">
                    <InstructCode>
                        <xsl:value-of select="NoteID"/>
                    </InstructCode>
                    <InstructValue>
                        <xsl:value-of select="GeneralNote"/>
                    </InstructValue>
                </Instructions>
            </xsl:for-each>
        </xsl:if>
        -->
		<xsl:if test="string(ListOfNameValueSet)">
			<xsl:for-each select="ListOfNameValueSet/NameValueSet/ListOfNameValuePair/NameValuePair">
				<Instructions InstrucType="NVP">
					<InstructCode>
						<xsl:value-of select="Name"/>
					</InstructCode>
					<InstructValue>
						<xsl:value-of select="Value"/>
					</InstructValue>
				</Instructions>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="string(BaseItemDetail/FinalRecipient)">
			<xsl:apply-templates select="BaseItemDetail/FinalRecipient/Party">
				<xsl:with-param name="partyType" select="'USR'"/>
				<xsl:with-param name="IDCodeType">
					<xsl:value-of select="$firstItemSHP/Party/PartyID/Identifier/Ident"/>
				</xsl:with-param>
			</xsl:apply-templates>
		</xsl:if>
	</xsl:template>
	<xsl:template name="itemDetail4SingleItem">
		<xsl:variable name="RDD" select="DeliveryDetail/ListOfScheduleLine/ScheduleLine/RequestedDeliveryDate"/>
		<ProductInformation ProductCode="VPN">
			<ProductDescription>
				<xsl:value-of select="BaseItemDetail/ItemIdentifiers/ItemDescription"/>
			</ProductDescription>
			<ProductNumber>
				<xsl:value-of select="normalize-space(BaseItemDetail/ItemIdentifiers/PartNumbers/SellerPartNumber/PartNum/PartID)"/>
			</ProductNumber>
		</ProductInformation>
		<xsl:variable name="ManufacturerPartPartID" select="translate(normalize-space(BaseItemDetail/ItemIdentifiers/PartNumbers/ManufacturerPartNumber/PartID), $lower, $upper)"/>
		<xsl:choose>
			<xsl:when test="substring($ManufacturerPartPartID, 1, 2) = 'Q-'">
				<ProductInformation ProductCode="MPN">
					<ProductNumber>
						<xsl:value-of select="normalize-space(BaseItemDetail/ItemIdentifiers/PartNumbers/ManufacturerPartNumber/PartID)"/>
					</ProductNumber>
				</ProductInformation>
			</xsl:when>
		</xsl:choose>
		<Quantity>
			<OrderQuantity>
				<xsl:value-of select="BaseItemDetail/TotalQuantity/Quantity/QuantityValue"/>
			</OrderQuantity>
		</Quantity>
		<xsl:if test="string(PricingDetail/ListOfPrice/Price/UnitPrice/UnitPriceValue)">
			<Price PriceType="VDP">
				<PriceAmount>
					<xsl:value-of select="PricingDetail/ListOfPrice/Price/UnitPrice/UnitPriceValue"/>
				</PriceAmount>
			</Price>
		</xsl:if>
		<!-- Commented out by Lei Lu on Oct. 20, 2006
        <xsl:if test="string(ListOfStructuredNote)">
            <xsl:for-each select="ListOfStructuredNote/StructuredNote">
                <Instructions InstrucType="LSN">
                    <InstructCode>
                        <xsl:value-of select="NoteID"/>
                    </InstructCode>
                    <InstructValue>
                        <xsl:value-of select="GeneralNote"/>
                    </InstructValue>
                </Instructions>
            </xsl:for-each>
        </xsl:if>
        -->
		<xsl:if test="string(ListOfNameValueSet)">
			<xsl:for-each select="ListOfNameValueSet/NameValueSet/ListOfNameValuePair/NameValuePair">
				<Instructions InstrucType="NVP">
					<InstructCode>
						<xsl:value-of select="Name"/>
					</InstructCode>
					<InstructValue>
						<xsl:value-of select="Value"/>
					</InstructValue>
				</Instructions>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="string(BaseItemDetail/FinalRecipient)">
			<xsl:apply-templates select="BaseItemDetail/FinalRecipient/Party">
				<xsl:with-param name="partyType" select="'USR'"/>
				<xsl:with-param name="IDCodeType">
					<xsl:value-of select="$firstItemSHP/Party/PartyID/Identifier/Ident"/>
				</xsl:with-param>
			</xsl:apply-templates>
		</xsl:if>
		<xsl:if test="string($RDD)">
			<DateInfo DateType="EAD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($RDD,1,4),'-',substring($RDD,5,2), '-', substring($RDD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<!--added SBD info by alex 2006-5-8-->
		<xsl:if test="string($RDD)">
			<DateInfo DateType="SBD">
				<DateTimeUTC>
					<xsl:value-of select="concat(substring($RDD,1,4),'-',substring($RDD,5,2), '-', substring($RDD, 7))"/>
				</DateTimeUTC>
			</DateInfo>
		</xsl:if>
		<CommodityCode>
			<xsl:value-of select="BaseItemDetail/ItemIdentifiers/CommodityCode/Identifier/Ident"/>
		</CommodityCode>
	</xsl:template>
	<xsl:template name="OrderSummary">
		<OrderSummary>
			<xsl:choose>
				<xsl:when test="OrderSummary/TotalAmount/MonetaryValue/MonetaryAmount">
					<TotalAmount>
						<xsl:value-of select="OrderSummary/TotalAmount/MonetaryValue/MonetaryAmount"/>
					</TotalAmount>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="list">
						<xsl:for-each select="OrderDetail/ListOfItemDetail/ItemDetail">
							<xsl:value-of select="PricingDetail/ListOfPrice/Price/UnitPrice * BaseItemDetail/TotalQuantity/Quantity/QuantityValue"/>
							<xsl:if test="position() != last()">B</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<TotalAmount>
						<xsl:call-template name="sum">
							<xsl:with-param name="str" select="string($list)"/>
						</xsl:call-template>
					</TotalAmount>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="string(OrderSummary/NumberOfLines)">
				<TotalNumLines>
					<xsl:value-of select="OrderSummary/NumberOfLines"/>
				</TotalNumLines>
			</xsl:if>
		</OrderSummary>
	</xsl:template>
	<!-- B is the seperator -->
	<xsl:template name="sum">
		<xsl:param name="str"/>
		<xsl:param name="total" select="0"/>
		<xsl:choose>
			<xsl:when test="contains($str,'B')">
				<xsl:call-template name="sum">
					<xsl:with-param name="str" select="substring-after($str,'B')"/>
					<xsl:with-param name="total" select="$total + substring-before($str,'B')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$total + $str"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
